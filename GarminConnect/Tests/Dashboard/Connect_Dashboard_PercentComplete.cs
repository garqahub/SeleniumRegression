#region Test Information
/*
* Test Name:
* Author:
* Purpose/Description:
* Creation Date:
* Version: 
* Updated By:
* Updated Date:
*/
#endregion

#region Using Statements
using System;
using System.Text;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Threading;
using System.Linq;
using NUnit.Framework;
using OpenQA.Selenium;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using System.Web;
using OpenQA.Selenium.IE;
using OpenQA.Selenium.Chrome;
using System.Drawing;
using Selenium;
#endregion


namespace SeleniumRegression
{
    //****Enter in desired test name in replace of EnterClassName****
    class Connect_Dashboard_PercentComplete : ParentTest
    {
        ConnectUtility utility;
        public Connect_Dashboard_PercentComplete(string url, WebDriverBackedSelenium webdriver, StringBuilder verrors)
        {
            //****Enter in Script Name here****  
            base.id = "Connect_Dashboard_PercentComplete";  //Enter Test Name
            base.baseURL = url;  //Be sure to update the selenium.Open command with baseURL
            base.selenium = webdriver;
            base.verificationErrors = verrors;
            base.quality = new QualityCheck(this);
            base.description = "**Create a goal and manual activity and verify the progress is at 50%**";
            utility = new ConnectUtility(this);
        }

 
        #region Test Script
        //this is the test code generated by selenium
        //****Paste test script here*****
        public override void RunTest()
        {

            selenium.Open(base.baseURL);
            utility.CreateUser("test1!");
            quality.Click("id=navBarTabDashboard");
            Thread.Sleep(3000);
            quality.Click("link=Create a new goal!");
            quality.WaitForPageToLoad("30000");
            quality.Type("id=ext-comp-1008", "test goal");
            quality.Type("id=ext-comp-1007", "8");
            quality.Click("id=saveGoalButton");
            quality.Click("id=navBarTabAnalyze");
            quality.WaitForPageToLoad("30000");
            quality.Click("link=Manual Activity");
            quality.WaitForPageToLoad("30000");
            quality.Type("id=activityNameDecoration:activityName", "test activity");
            quality.Select("id=activityTypeDecoration:activityType", "label=Running");
            quality.Type("id=speedPaceContainer:activitySummarySumDuration", "4");
            quality.Click("id=saveButton");
            quality.Click("id=navBarTabDashboard");
            quality.WaitForPageToLoad("30000");
            quality.Click("id=main");
            quality.IsElementPresent("50% completed");
            utility.SignOut();

        }
        #endregion


    }


}
