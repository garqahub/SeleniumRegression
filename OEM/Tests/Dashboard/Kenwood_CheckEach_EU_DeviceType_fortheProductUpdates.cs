#region Test Information
/*
* Test Name:
* Author:
* Purpose/Description:
* Creation Date:
* Version: 
* Updated By:
* Updated Date:
*/
#endregion

#region Using Statements
using System;
using System.Text;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Threading;
using System.Linq;
using NUnit.Framework;
using OpenQA.Selenium;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using System.Web;
using OpenQA.Selenium.IE;
using OpenQA.Selenium.Chrome;
using System.Drawing;
using Selenium;
#endregion


namespace SeleniumRegression
{
    //****Enter in desired test name in replace of EnterClassName****
    class Kenwood_CheckEach_EU_DeviceType_fortheProductUpdates : ParentTest
    {
        KenwoodFunctions ken;

        public Kenwood_CheckEach_EU_DeviceType_fortheProductUpdates(string url, WebDriverBackedSelenium webdriver, StringBuilder verrors)
        {
            //****Enter in Script Name here****  
            base.id = "CheckEach_EU_DeviceType_fortheProductUpdates";  //Enter Test Name
            base.baseURL = url;  //Be sure to update the selenium.Open command with baseURL
            base.selenium = webdriver;
            base.verificationErrors = verrors;
            base.quality = new QualityCheck(this);
            base.description = "**CheckEach_EU_DeviceType_fortheProductUpdates**";
            ken = new KenwoodFunctions(quality, selenium);
        }

        #region Test Script
        //this is the test code generated by selenium
        //****Paste test script here*****
        public override void RunTest()
        {
            selenium.Open(base.baseURL);
            quality.AreEqual("Garmin Product Updates for Kenwood", quality.GetTitle());
            quality.Click("css=a.button > span");
            quality.WaitForPageToLoad("30000");

            ken.DeviceSelectionPage();

            quality.Select("id=headUnitRegionFilter", "label=All");
            quality.WaitForPageToLoad("30000");
            quality.Select("id=headUnitRegionFilter", "label=Europe");
            quality.WaitForPageToLoad("30000");
            quality.AreEqual("Select a Model", quality.GetTitle());

            string availableEUdevices = quality.GetText("css=div.itemSelectionBox");
            char[] splits = { '\n', ' ' };
            string[] EUdevices = availableEUdevices.Trim().Split(splits);

            List<string> l = new List<string>();

            int i = 0;

            foreach (string s in EUdevices)
            {
                if ((s != " ") && (s != ""))
                {
                    l.Add(s);
                    Console.WriteLine("i: " + i + " >> " + l[i]);
                    i++;
                }

            }

            //check all the items from the list ignoring the elements which need SD card to be read
            for (int j = 0; j < i; j++)
            {
                Console.WriteLine("click on : " + l[j].ToString());

                quality.Click("link=" + l[j] + "");
                quality.WaitForPageToLoad("30000");
                string title = quality.GetTitle();

                Match match1 = Regex.Match(title, @"^(Product Updates for Kenwood.*)", RegexOptions.IgnoreCase);

                //if the Product Updates page is displayed try to click on the available features
                if (match1.Success)
                {
                    //check if the "Latest Map" option is available and then click it
                    if ((quality.IsElementPresent("css=div.productUpdate > div.description > div.header") == true) && (quality.IsTextPresent("Latest Map") == true) && (quality.IsElementPresent("css=div.noLink") != true))
                    {
                        quality.Click("css=div.productUpdate > div.description > div.header");
                        quality.WaitForPageToLoad("30000");
                        quality.IsTrue(Regex.IsMatch(quality.GetText("css=div.titleHeader-text"), "Latest Map for Kenwood .*"));
                        quality.AreEqual("« Back to Updates", quality.GetText("css=a.button > span"));

                        //go back to product updates
                        quality.Click("css=a.button > span");
                    }
                    //check if the "Software Updates" option is available and then click it
                    if ((quality.IsElementPresent("css=div.description.padding-top-10 > div.header") == true) && (quality.IsTextPresent("Software Updates") == true))
                    {
                        quality.Click("css=div.description.padding-top-10 > div.header");
                        quality.WaitForPageToLoad("30000");
                        quality.AreEqual("Software Update", quality.GetTitle());
                        quality.AreEqual("Software Update", quality.GetText("css=div.titleHeader-text"));
                        quality.AreEqual("« Back to Updates", quality.GetText("css=a.button > span"));

                        //go back to product updates
                        quality.Click("css=a.button > span");
                    }
                    //check if the "Real-Time Traffic" option is available and then click it
                    if ((quality.IsElementPresent("//div[@id='productUpdates']/a[2]/div/div/div") == true) && (quality.IsTextPresent("Real-Time Traffic") == true))
                    {
                        quality.Click("//div[@id='productUpdates']/a[2]/div/div/div");
                        quality.WaitForPageToLoad("30000");
                        quality.IsTrue(Regex.IsMatch(quality.GetText("css=div.titleHeader-text"), "Traffic Subscriptions for Your.*"));

                        //click on the first available traffic subscription
                        quality.Click("css=div.text");
                        quality.WaitForPageToLoad("30000");
                        quality.AreEqual("Traffic Services for Kenwood", quality.GetTitle());
                        quality.AreEqual("« Back to Updates", quality.GetText("css=a.button > span"));

                        //go back to product updates
                        quality.Click("css=a.button > span");
                    }

                    for (int second = 0; second <61 ; second++)
                    {
                        if (second >= 60) quality.ErrorReport("timeout", CheckType.Warning);
                        try
                        {
                            if (quality.IsElementPresent("link=Select Device")) break;
                        }
                        catch (Exception)
                        { }
                        Thread.Sleep(1000);
                    }

                    //go to "Select Model Device" page
                    quality.Click("link=Select Device");
                    quality.WaitForPageToLoad("30000");
                    quality.AreEqual("Select a Model", quality.GetTitle());
                }
                //go to the next item 
                else
                {
                    for (int second = 0; second <61 ; second++)
                    {
                        if (second >= 60) quality.ErrorReport("timeout", CheckType.Warning);
                        try
                        {
                            if ("Select Device" == quality.GetText("link=Select Device")) break;
                        }
                        catch (Exception)
                        { }
                        Thread.Sleep(1000);
                    }


                    //go to "Select Model Device" page
                    quality.Click("link=Select Device");
                    quality.WaitForPageToLoad("30000");
                    quality.AreEqual("Select a Model", quality.GetTitle());

                    continue;
                }
            }


        }
        #endregion


    }


}
