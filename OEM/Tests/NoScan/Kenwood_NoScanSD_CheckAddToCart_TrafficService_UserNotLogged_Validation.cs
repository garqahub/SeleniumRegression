#region Test Information
/*
* Test Name:
* Author:
* Purpose/Description:
* Creation Date:
* Version: 
* Updated By:
* Updated Date:
*/
#endregion

#region Using Statements
using System;
using System.Text;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Threading;
using System.Linq;
using NUnit.Framework;
using OpenQA.Selenium;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using System.Web;
using OpenQA.Selenium.IE;
using OpenQA.Selenium.Chrome;
using System.Drawing;
using Selenium;
#endregion


namespace SeleniumRegression
{
    //****Enter in desired test name in replace of EnterClassName****
    class Kenwood_NoScanSD_CheckAddToCart_TrafficService_UserNotLogged_Validation : ParentTest
    {
        KenwoodFunctions ken;

        public Kenwood_NoScanSD_CheckAddToCart_TrafficService_UserNotLogged_Validation(string url, WebDriverBackedSelenium webdriver, StringBuilder verrors)
        {
            //****Enter in Script Name here****  
            base.id = "NoScanSD_CheckAddToCart_TrafficService_UserNotLogged_Validation";  //Enter Test Name
            base.baseURL = url;  //Be sure to update the selenium.Open command with baseURL
            base.selenium = webdriver;
            base.verificationErrors = verrors;
            base.quality = new QualityCheck(this);
            base.description = "**NoScanSD_CheckAddToCart_TrafficService_UserNotLogged_Validation**";
            ken = new KenwoodFunctions(quality, selenium);
        }

        #region Test Script
        //this is the test code generated by selenium
        //****Paste test script here*****
        public override void RunTest()
        {
            selenium.Open(base.baseURL);
            quality.AreEqual("Garmin Product Updates for Kenwood", quality.GetTitle());
            quality.Click("css=a.button > span");
            quality.WaitForPageToLoad("30000");

            ken.DeviceSelectionPage();

            quality.Select("id=headUnitRegionFilter", "label=All");
            quality.WaitForPageToLoad("30000");
            quality.Select("id=headUnitRegionFilter", "label=Europe");
            quality.WaitForPageToLoad("30000");
            quality.AreEqual("Select a Model", quality.GetTitle());

            //comment: Select the same device like the one from the XML
            quality.Click("link=DNX5220");
            try
            {
                selenium.Click("link=DNX5220");
            }
            catch (Exception)
            {
                
            }

            quality.WaitForPageToLoad("30000");


            ken.ProductUpdatesPage(true);

            // comment: Click on "Real-Time Traffic" button
            quality.Click("//div[@id='productUpdates']/a[2]/div/div/div");
            quality.WaitForPageToLoad("30000");

            ken.TrafficSubscriptionPage();

            //comment: Click on the first traffic subscription (North America)
            quality.Click("css=div.text");
            quality.WaitForPageToLoad("30000");

            ken.TrafficServicesForkenwoodPage();

            //comment: Click "Add to Cart" button without beeing logged-in
            quality.Click("css=a.button.left > span");
            quality.WaitForPageToLoad("30000");

            ken.SignInPage();

            quality.Type("id=username", username);
            quality.Type("id=password", password);
            quality.Click("css=a.button");
            quality.WaitForPageToLoad("30000");

            //comment: Validate the "Add to Cart: Traffic Subscription" page
            ken.AddToCartTrafficVerification(false);

            //comment: Validate the "Add to Cart: Traffic Subscription" - do not enter any value and press the Continue btn
            quality.Click("link=Continue");
            quality.WaitForPageToLoad("30000");
            
            //quality.IsTextPresent("Traffic Receiver ID is required");
            quality.IsTextPresent("Unit ID is required");

            //comment: special characters for Unit ID
            quality.Type("id=unitId", "!@#$%@@%$$#@!$%#@!!$%$");
            quality.Click("link=Continue");
            quality.WaitForPageToLoad("30000");
            //quality.AreEqual("Add to Cart: Traffic Verification", quality.GetTitle());
            //quality.IsTextPresent("Traffic Receiver ID is required");
            quality.IsTextPresent("Please enter a valid Unit ID");
            
            //comment: special caracters for unit Id and traffic receivcer ID
            quality.Type("id=unitId", "!@#$%@@%$$#@!$%#@!!$%$");
            //quality.Type("id=trafficReceiverId", "!@#$%@@%$$#@!$%#@!!$%$");
            quality.Click("link=Continue");
            quality.WaitForPageToLoad("30000");
            //quality.AreEqual("Add to Cart: Traffic Verification", quality.GetTitle());
            //quality.IsTextPresent("Please enter a valid Traffic Receiver ID");
            quality.IsTextPresent("Please enter a valid Unit ID");

            //comment: Type special characters for traffic receiver id
            quality.Type("id=unitId", "");
            //quality.Type("id=trafficReceiverId", "!@#$%@@%$$#@!$%#@!!$%$");
            quality.Click("link=Continue");
            quality.WaitForPageToLoad("30000");
            //quality.AreEqual("Add to Cart: Traffic Verification", quality.GetTitle());
            //quality.IsTextPresent("Please enter a valid Traffic Receiver ID");
            quality.IsTextPresent("Unit ID is required");

            //comment: Type string characters for Unit ID
            quality.Type("id=unitId", "qweqrrqwerewqrwerweqrqwrwqrwrwq");
            //quality.Type("id=trafficReceiverId", "qweqrrqwerewqrwerweqrqwrwqrwrwq");
            quality.Click("link=Continue");
            quality.WaitForPageToLoad("30000");
            //quality.AreEqual("Add to Cart: Traffic Verification", quality.GetTitle());
            //quality.IsTextPresent("Please enter a valid Traffic Receiver ID");
            quality.IsTextPresent("Please enter a valid Unit ID");

            //comment: Type invalid values for Unit ID and Traffic Receiver ID
            quality.Type("id=unitId", "-1");
            //quality.Type("id=trafficReceiverId", "-1");
            quality.Click("link=Continue");
            quality.WaitForPageToLoad("30000");
           // quality.AreEqual("Add to Cart: Traffic Verification", quality.GetTitle());
            quality.IsTextPresent("The Unit ID you entered is not valid");
            //quality.AreEqual("The Traffic Receiver ID you entered is not valid", quality.GetText("//div[@id='bd']/ul/li[2]"));

            //comment: Type a valid a Traffic Receiver ID and press "Continue" without a Unit ID
            quality.Type("id=unitId", "");
            //quality.Type("id=trafficReceiverId", unitIdNotRegistered);
            quality.Click("link=Continue");
            quality.WaitForPageToLoad("30000");
           // quality.AreEqual("Add to Cart: Traffic Verification", quality.GetTitle());
            quality.IsTextPresent("Unit ID is required");

            //comment: Type a valid Unit Id and a valid traffic receiver id which is registered to another user account
            quality.Type("id=unitId", "");
            //quality.Type("id=trafficReceiverId", "");
            quality.Type("id=unitId", unitIdRegistered);
            //quality.Type("id=trafficReceiverId", unitIdRegistered);
            quality.Click("link=Continue");
            quality.WaitForPageToLoad("30000");
            //quality.AreEqual("Add to Cart: Traffic Verification", quality.GetTitle());
            quality.IsTextPresent("This device is currently registered to another user account");
            //quality.AreEqual("This traffic receiver is currently registered to another user account", quality.GetText("//div[@id='bd']/ul/li[2]"));

            //comment: Type a valid Unit ID and leave empty the Traffic Receiver ID
            quality.Type("id=unitId", unitIdNotRegistered);
            //quality.Type("id=trafficReceiverId", "");
            quality.Click("link=Continue");
            quality.WaitForPageToLoad("30000");
            //quality.AreEqual("Add to Cart: Traffic Verification", quality.GetTitle());
            //quality.IsTextPresent("Traffic Receiver ID is required");



            //ken.AddToCartTrafficVerification(quality, false);
            //ken.ShoppingCartWithTrafficSubscriptionToBuy(true);

            ken.Logout();



        }
        #endregion


    }


}
