#region Test Information
/*
* Test Name:
* Author:
* Purpose/Description:
* Creation Date:
* Version: 
* Updated By:
* Updated Date:
*/
#endregion

#region Using Statements
using System;
using System.Text;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Threading;
using System.Linq;
using NUnit.Framework;
using OpenQA.Selenium;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using System.Web;
using OpenQA.Selenium.IE;
using OpenQA.Selenium.Chrome;
using System.Drawing;
using Selenium;
#endregion


namespace SeleniumRegression
{
    //****Enter in desired test name in replace of EnterClassName****
    class Kenwood_ScanSD_CheckAddToCart_TrafficService_DeviceHasOnlyTrafficReceiveId : ParentTest
    {
        KenwoodFunctions ken;

        public Kenwood_ScanSD_CheckAddToCart_TrafficService_DeviceHasOnlyTrafficReceiveId(string url, WebDriverBackedSelenium webdriver, StringBuilder verrors)
        {
            //****Enter in Script Name here****  
            base.id = "ScanSD_CheckAddToCart_TrafficService_DeviceHasOnlyTrafficReceiveId";  //Enter Test Name
            base.baseURL = url;  //Be sure to update the selenium.Open command with baseURL
            base.selenium = webdriver;
            base.verificationErrors = verrors;
            base.quality = new QualityCheck(this);
            base.description = "**ScanSD_CheckAddToCart_TrafficService_DeviceHasOnlyTrafficReceiveId**";
            ken = new KenwoodFunctions(quality, selenium);
        }

        #region Test Script
        //this is the test code generated by selenium
        //****Paste test script here*****
        public override void RunTest()
        {
            selenium.Open(base.baseURL);
            Update_XML.WriteXML("DNX7180_XML");

            //TheKenwood_ModelTest: DNX4210DAB iD: 1011105504

            Update_XML.XMLEdit("Id", "1011105504");

            selenium.SetSpeed("1300");

            quality.AreEqual("Garmin Product Updates for Kenwood", quality.GetTitle());
            quality.Click("css=a.button > span");
            quality.WaitForPageToLoad("30000");

            ken.DeviceSelectionPage();

            quality.Select("id=headUnitRegionFilter", "label=All");
            quality.WaitForPageToLoad("30000");
            quality.Select("id=headUnitRegionFilter", "label=Europe");
            quality.WaitForPageToLoad("30000");
            quality.AreEqual("Select a Model", quality.GetTitle());

            //comment: Select the same device like the one from the XML
            quality.Click("link=DNX4210DAB");
            quality.WaitForPageToLoad("30000");

            ken.ModelIdentificationPage();

            //comment: click on "Read Media" button
            quality.Click("css=a.button > span");
            quality.WaitForPageToLoad("30000");
            quality.AreEqual("Scan Portable Media", quality.GetTitle());

            if (ken.CheckForTimeOut("Media Scan", "css=div.titleHeader-text", 61))
            {
                failedcheck++;
            }
            quality.AreEqual("Media Scan", quality.GetText("css=div.titleHeader-text"));
            quality.AreEqual("Scanning Your Portable Storage Device... Please wait", quality.GetText("id=messageText"));

            ken.DeviceInformationFoundPage(true);

            // comment: Click on the "Continue" button
            quality.Click("css=a.button > span");
            quality.WaitForPageToLoad("30000");

            ken.ProductUpdatesPage_NoUpdates();

            // comment: Click on "Real-Time Traffic" button
            quality.Click("css=a.updatesLink > div.productUpdate > div.description > div.header");
            quality.WaitForPageToLoad("30000");

            //comment: Check the "Traffic subscription for Kenwood"
            ken.TrafficSubscriptionPage();

            //comment: Click on the first traffic subscription (North America)
            quality.Click("css=div.text");
            quality.WaitForPageToLoad("30000");

            ken.TrafficServicesForkenwoodPage();

            //comment: Click "Add to Cart" button without beeing logged-in
            quality.Click("css=a.button.left > span");
            quality.WaitForPageToLoad("30000");

            ken.SignInPage();

            quality.Type("id=username", username);
            quality.Type("id=password", password);
            quality.Click("css=a.button");
            quality.WaitForPageToLoad("30000");

            //check if the only the traffic receiver text box is display for this kind of device
            ken.TrafficReceiverOnlyPage();

            //comment:  do not enter any value and press the Continue btn
            quality.Click("//form[@id='verifyTrafficForm']/table/tbody/tr[5]/td/a[2]/span");
            quality.WaitForPageToLoad("30000");
            quality.AreEqual("Add to Cart: Traffic Verification", quality.GetTitle());
            quality.AreEqual("Traffic Receiver ID is required", quality.GetText("css=ul.error > li"));

            //comment: special characters for traffic receiver ID
            quality.Type("id=trafficReceiverId", "!@#$%@@%$$#@!$%#@!!$%$");
            quality.Click("//form[@id='verifyTrafficForm']/table/tbody/tr[5]/td/a[2]/span");
            quality.WaitForPageToLoad("30000");
            quality.AreEqual("Add to Cart: Traffic Verification", quality.GetTitle());
            quality.AreEqual("Please enter a valid Traffic Receiver ID", quality.GetText("css=ul.error > li"));

            //comment: Type string characters for traffic receiver ID
            quality.Type("id=trafficReceiverId", "qweqrrqwerewqrwerweqrqwrwqrwrwq");
            quality.Click("//form[@id='verifyTrafficForm']/table/tbody/tr[5]/td/a[2]/span");
            quality.WaitForPageToLoad("30000");
            quality.AreEqual("Add to Cart: Traffic Verification", quality.GetTitle());
            quality.AreEqual("Please enter a valid Traffic Receiver ID", quality.GetText("css=ul.error > li"));

            //comment: Type invalid values for Traffic Receiver ID
            quality.Type("id=trafficReceiverId", "-1");
            quality.Click("//form[@id='verifyTrafficForm']/table/tbody/tr[5]/td/a[2]/span");
            quality.WaitForPageToLoad("30000");
            quality.AreEqual("Add to Cart: Traffic Verification", quality.GetTitle());
            quality.AreEqual("The Traffic Receiver ID you entered is not valid", quality.GetText("css=ul.error > li"));

            //comment: Type invalid values for Traffic Receiver ID
            quality.Type("id=trafficReceiverId", "-1");
            quality.Click("//form[@id='verifyTrafficForm']/table/tbody/tr[5]/td/a[2]/span");
            quality.WaitForPageToLoad("30000");
            quality.AreEqual("Add to Cart: Traffic Verification", quality.GetTitle());
            quality.AreEqual("The Traffic Receiver ID you entered is not valid", quality.GetText("css=ul.error > li"));

            //comment: Type a valid traffic receiver id which is registered to another user account
            quality.Type("id=trafficReceiverId", unitIdRegistered);
            quality.Click("//form[@id='verifyTrafficForm']/table/tbody/tr[5]/td/a[2]/span");
            quality.WaitForPageToLoad("30000");
            quality.AreEqual("Add to Cart: Traffic Verification", quality.GetTitle());
            quality.AreEqual("This traffic receiver is currently registered to another user account", quality.GetText("css=ul.error > li"));

            //comment: Type a valid valid traffic receiver id
            quality.Type("id=trafficReceiverId", unitIdNotRegistered);
            quality.Click("//form[@id='verifyTrafficForm']/table/tbody/tr[5]/td/a[2]/span");
            quality.WaitForPageToLoad("30000");

            ken.ShoppingCartWithTrafficSubscriptionToBuy(true);

            ken.Logout();


        }
        #endregion


    }


}
