#region Test Information
/*
* Test Name:
* Author:
* Purpose/Description:
* Creation Date:
* Version: 
* Updated By:
* Updated Date:
*/
#endregion

#region Using Statements
using System;
using System.Text;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Threading;
using System.Linq;
using NUnit.Framework;
using OpenQA.Selenium;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using System.Web;
using OpenQA.Selenium.IE;
using OpenQA.Selenium.Chrome;
using System.Drawing;
using Selenium;
#endregion


namespace SeleniumRegression
{
    //****Enter in desired test name in replace of EnterClassName****
    class Kenwood_ScanSD_CheckBillingAddress_Validation : ParentTest
    {
        KenwoodFunctions ken;
        public Kenwood_ScanSD_CheckBillingAddress_Validation(string url, WebDriverBackedSelenium webdriver, StringBuilder verrors)
        {
            //****Enter in Script Name here****  
            base.id = "ScanSD_CheckBillingAddress_Validation";  //Enter Test Name
            base.baseURL = url;  //Be sure to update the selenium.Open command with baseURL
            base.selenium = webdriver;
            base.verificationErrors = verrors;
            base.quality = new QualityCheck(this);
            base.description = "**Kenwood_ScanSD_CheckBillingAddress_Validation**";
            ken = new KenwoodFunctions(quality, selenium);
        }

        #region Test Script
        //this is the test code generated by selenium
        //****Paste test script here*****
        public override void RunTest()
        {

            selenium.Open(base.baseURL);
            quality.AreEqual("Garmin Product Updates for Kenwood", quality.GetTitle());
            quality.Click("link=Sign In");
            quality.WaitForPageToLoad("30000");

            quality.AreEqual("Sign In", quality.GetTitle());

            ken.Login(username, password, fullname, false);

            //comment: Click on "Update" button from the "Product Updates" panel
            quality.Click("css=a.button > span");
            quality.WaitForPageToLoad("30000");

            ken.DeviceSelectionPage();

            //comment: Select the same device like the one from the XML
            quality.Select("id=headUnitRegionFilter", "label=All");
            quality.WaitForPageToLoad("30000");
            quality.Select("id=headUnitRegionFilter", "label=North America");
            quality.WaitForPageToLoad("30000");
            quality.Click("link=DNX7180");
            quality.WaitForPageToLoad("30000");

            ken.ModelIdentificationPage();

            //comment: click on "Read Media" button
            quality.Click("css=a.button > span");
            quality.WaitForPageToLoad("30000");
            quality.AreEqual("Scan Portable Media", quality.GetTitle());

            if (ken.CheckForTimeOut("Media Scan","css=div.titleHeader-text", 61))
            {
                failedcheck++;
            }


            quality.AreEqual("Media Scan", quality.GetText("css=div.titleHeader-text"));
            quality.AreEqual("Scanning Your Portable Storage Device... Please wait", quality.GetText("id=messageText"));

            ken.DeviceInformationFoundPage(true);

            // comment: Click on the "Continue" button
            quality.Click("css=a.button > span");
            quality.WaitForPageToLoad("30000");

            ken.ProductUpdatesPage(true);

            // comment: Click on "Latest Map" button
            quality.Click("css=div.description > span");
            quality.WaitForPageToLoad("30000");

            //comment: Check the "Latest Map for Kenwood"
            ken.LatestMapForKenwoodPage(true);

            //comment: Click "Add to Cart" button without beeing logged-in
            quality.Click("css=a.button.left > span");
            quality.WaitForPageToLoad("30000");

            ken.ShoppingCartWithLatestMapToBuy();

            // comment: Click the "Checkout" button
            quality.Click("//form[@id='shoppingCartForm']/div[2]/div[4]/a[2]/span");
            quality.WaitForPageToLoad("30000");

            ken.CheckOutPage();

            // comment: Update the Shipping address fields
            quality.Type("id=shippingAddressfirstName", "FirstName Tester");
            quality.Type("id=shippingAddresslastName", "LastName Tester");
            quality.Select("id=shippingAddresscountry", "label=Select a Country/Region");
            quality.Select("id=shippingAddresscountry", "label=United States");
            quality.Type("id=shippingAddressaddress1", "AddressLine1 tester's address");
            quality.Type("id=shippingAddressaddress2", "AddressLine2 tester's address");
            quality.Type("id=shippingAddresscity", "");
            quality.Type("id=shippingAddresscity", "HILO");
            quality.Select("id=shippingAddressstate", "label=Hawaii");
            quality.Type("id=shippingAddresszipPostal", "");
            quality.Type("id=shippingAddresszipPostal", "96720");
            quality.Type("id=shippingAddressphone", "");
            quality.Type("id=shippingAddressphone", "000-555-1212");

            quality.Click("id=continueBtn");
            quality.WaitForPageToLoad("30000");

            // comment: Check that the "Billing Address" page is displayed
            if (ken.CheckForTimeOut("Edit", "link=Edit", 61))
            {
                failedcheck++;
            }


            quality.AreEqual("Edit", quality.GetText("link=Edit"));
            quality.AreEqual("Shipping Address", quality.GetText("css=h2"));
            quality.AreEqual("Billing Address", quality.GetText("css=fieldset > div.formHead > h2"));
            quality.AreEqual("Payment Information", quality.GetText("css=#payment-information > fieldset > div.formHead > h2"));
            quality.AreEqual("Place Secure Order", quality.GetText("id=submitOrder"));

            //complete the Payment Information section before testing the billing address section for getting all the error messages
            quality.Select("name=cardType", "label=Visa");
            quality.Type("id=cardHolderName", "holder name");
            quality.Type("id=cardNumber", "4111111111111111");
            quality.Type("id=cardSecurityCode", "123");
            quality.Select("id=expYear", "label=2027");

            //uncheck the Billing address
            //get if a checkbox is checked or not
            string checkedOrNot = quality.GetValue("id=sameAsShipping-sameAddress");

            if (checkedOrNot != "off")
            {
                quality.Click("id=sameAsShipping-sameAddress");
            }


            //comment: Empty all the requiered fields and press the "Continue" button
            quality.Type("id=billingAddressfirstName", "");
            quality.Type("id=billingAddresslastName", "");
            quality.Select("id=billingAddresscountry", "label=Select a Country/Region");
            quality.Type("id=billingAddressaddress1", "");
            quality.Type("id=billingAddressaddress2", "");
            quality.Type("id=billingAddresscity", "");
            quality.Select("id=billingAddressstate", "label=Select a State/Province");
            quality.Type("id=billingAddresszipPostal", "");
            quality.Type("id=billingAddresszipPostal", "");
            quality.Type("id=billingAddressphone", "");
            quality.Type("id=billingAddressphone", "");

            quality.Click("id=submitOrder");

            if (ken.CheckForTimeOut("This field is required.", "css=div.alert > span", 61))
            {
                failedcheck++;
            }


            quality.AreEqual("This field is required.", quality.GetText("css=div.alert > span"));
            quality.AreEqual("This field is required.", quality.GetText("css=#billingAddress-last-name > div.formAlert > div.alert > span"));
            quality.AreEqual("This field is required.", quality.GetText("css=#billingAddress-country-region > div.formAlert > div.alert > span"));
            quality.AreEqual("This field is required.", quality.GetText("css=#billingAddress-address-line-1 > div.formAlert > div.alert > span"));
            quality.AreEqual("This field is required.", quality.GetText("css=#billingAddress-city > div.formAlert > div.alert > span"));
            quality.AreEqual("This field is required.", quality.GetText("css=#billingAddress-state-province > div.formAlert > div.alert > span"));
            quality.AreEqual("This field is required.", quality.GetText("css=#billingAddress-zip-postal-code > div.formAlert > div.alert > span"));
            quality.AreEqual("This field is required.", quality.GetText("css=#billingAddress-phone > div.formAlert > div.alert > span"));

            // comment: State doesn't match the the zip code
            quality.Type("id=billingAddressfirstName", "ABC Tester");
            quality.Type("id=billingAddresslastName", "EFG Tester");
            quality.Select("id=billingAddresscountry", "label=Select a Country/Region");
            quality.Select("id=billingAddresscountry", "label=United States");
            quality.Type("id=billingAddressaddress1", "lololol tester's address");
            quality.Type("id=billingAddressaddress2", "qwerty tester's address");
            quality.Type("id=billingAddresscity", "HILO");
            quality.Select("id=billingAddressstate", "label=Idaho");
            quality.Type("id=billingAddresszipPostal", "");
            quality.Type("id=billingAddresszipPostal", "96720");
            quality.Type("id=billingAddressphone", "");
            quality.Type("id=billingAddressphone", "789-555-888824");

            quality.Click("id=submitOrder");

            if (ken.CheckForTimeOut("State does not match zip/postal code.", "css=#billingAddress-state-province > div.formAlert > div.alert > span", 61))
            {
                failedcheck++;
            }


            quality.AreEqual("State does not match zip/postal code.", quality.GetText("css=#billingAddress-state-province > div.formAlert > div.alert > span"));

            // comment: Zip code is not valid
            quality.Type("id=billingAddressfirstName", "ABC Tester");
            quality.Type("id=billingAddresslastName", "EFG Tester");
            quality.Select("id=billingAddresscountry", "label=Select a Country/Region");
            quality.Select("id=billingAddresscountry", "label=United States");
            quality.Type("id=billingAddressaddress1", "lololol tester's address");
            quality.Type("id=billingAddressaddress2", "qwerty tester's address");
            quality.Type("id=billingAddresscity", "");
            quality.Type("id=billingAddresscity", "HILO");
            quality.Select("id=billingAddressstate", "label=Hawaii");
            quality.Type("id=billingAddresszipPostal", "");
            quality.Type("id=billingAddresszipPostal", "12356");
            quality.Type("id=billingAddressphone", "");
            quality.Type("id=billingAddressphone", "789-555-888824");

            quality.Click("id=submitOrder");

            if (ken.CheckForTimeOut("Zip/postal code is not valid.","css=#billingAddress-zip-postal-code > div.formAlert > div.alert > span", 61))
            {
                failedcheck++;
            }


            quality.AreEqual("Zip/postal code is not valid.", quality.GetText("css=#billingAddress-zip-postal-code > div.formAlert > div.alert > span"));

            //comment: Type the maximum values for First Name, Last Name (100 characters) & Address1, Address2(200 characters) & Phone (20 characters) & City (100 characters)
            quality.Type("id=billingAddressfirstName", "FirstName TesterFirstName TesterFirstName TesterFirstName TesterFirstName TesterFirstName TesterFirs");
            quality.Type("id=billingAddresslastName", "FirstName TesterFirstName TesterFirstName TesterFirstName TesterFirstName TesterFirstName TesterFirs");
            quality.Select("id=billingAddresscountry", "label=Select a Country/Region");
            quality.Select("id=billingAddresscountry", "label=Hong Kong");
            quality.Type("id=billingAddressaddress1", "AddressLine1 tester's addressAddressLine1 tester's addressAddressLine1 tester's addressAddressLine1 tester's addressAddressLine1 tester's addressAddressLine1 tester's addressAddressLine1 tester's addr");
            quality.Type("id=billingAddressaddress2", "AddressLine1 tester's addressAddressLine1 tester's addressAddressLine1 tester's addressAddressLine1 tester's addressAddressLine1 tester's addressAddressLine1 tester's addressAddressLine1 tester's addr");

            quality.IsTrue(quality.IsElementPresent("id=billingAddressstate"));

            quality.Type("id=billingAddresscity", "HILOHILOHILOHILOHILOHILOHILOHILOHILOHILOHILOHILOHILOHILOHILOHILOHILOHILOHILOHILOHILOHILOHILOHILOHILO");
            quality.Type("id=billingAddresszipPostal", "12351235498456564546163112316984565645461631123163");
            quality.Type("id=billingAddressphone", "000-555-1212000-555-");

            // comment: City doesn't match the the zip code
            quality.Type("id=billingAddressfirstName", "ABC Tester");
            quality.Type("id=billingAddresslastName", "EFG Tester");
            quality.Select("id=billingAddresscountry", "label=Select a Country/Region");
            quality.Select("id=billingAddresscountry", "label=United States");
            quality.Type("id=billingAddressaddress1", "lololol tester's address");
            quality.Type("id=billingAddressaddress2", "qwerty tester's address");
            quality.Type("id=billingAddresscity", "Cluj");
            quality.Select("id=billingAddressstate", "label=Alaska");
            quality.Type("id=billingAddresszipPostal", "");
            quality.Type("id=billingAddresszipPostal", "99515");
            quality.Type("id=billingAddressphone", "");
            quality.Type("id=billingAddressphone", "789-555-888824");

            quality.Click("id=submitOrder");

            if (ken.CheckForTimeOut("City does not match zip/postal code. Please select a city from the list, or continue with the city you entered." ,"css=#billingAddress-city > div.formAlert > div.alert > span", 61))
            {
                failedcheck++;
            }


            quality.AreEqual("City does not match zip/postal code. Please select a city from the list, or continue with the city you entered.", quality.GetText("css=#billingAddress-city > div.formAlert > div.alert > span"));

            // comment: Go back to Cart and remove the product
            quality.AreEqual("Back to Cart", quality.GetText("id=cancelBtn"));
            quality.Click("css=a.margin-l5");
            quality.WaitForPageToLoad("30000");
            quality.AreEqual("Shopping Cart", quality.GetTitle());
            try
            {
                quality.IsTrue(quality.IsTextPresent("remove"));
            }
            catch (Exception)
            {
                failedcheck++;
            }
            quality.Click("link=remove");
            quality.WaitForPageToLoad("30000");
            quality.AreEqual("Shopping Cart", quality.GetTitle());
            quality.AreEqual("Your Shopping Cart is currently empty", quality.GetText("css=div.cartEmpty"));

            ken.Logout();


        }
        #endregion


    }


}
